/**
* @file rps.cpp
* @author David Teng
* @Date  05/29/2018
* @version 1.0
*Rock, Paper, and Scissors Game. Computer will generate a number between a
*number one, two and three, which corresponds to Rock, Paper, and Scissors, respectively.
* User will input either one, two, or three based on the lists given by the options in the program
*for the user. Similarly, one will imply rock, two for paper, and three for scissors. Based on
* the user and computer random generated number, the result will be compared to determine the winner.
*The result will be judged based on the rule of the game of "Rock, Paper, Scissors"
*/
//
// _____ David Teng ____      _____May 29/2018____________
#include <iostream>  
#include <stdlib.h>
#include <time.h>

using namespace std;
/*Creating a class for Rock, Paper, Scissor Game called RPS_Game, abbreviated from the initials
  of R from Rock, P from Paper, and S from Scissors*/
class  RPS_Game
{
	/*Public includes important member functions such as random number generator,
	 determine the winner, and output all the required messages to the screen.*/
	public:
		/*Constructor for initializing the private member variables*/
		RPS_Game();
		/*User interface from the screen*/
		void player_input();
		/*Result function determines the winner of the game*/ 
		void result(int user_input, int comp_input);
		/*Function for determining whether Rock, Paper, or Scissor has been chosen*/
		void u_choice(int game_input);
		/*Function for determining whether Rock, Paper, or Scissor has been chosen by the computer*/
		void c_choice(int c_input);
		/*Function for generating a random number as a input from the computer*/
		int cmpt_choice();
		/*Function for accessing the value of user_choice*/
		int getUserData();
		/*Function for accessing the value of cmpt_rand*/
		int getCmptData();
		
	/*Private includes private variables for storing the random number generated by the computer*/
	private:
		//Variable for storing Computer Random Generated Number 
		int comp_rand; 
		//Variable for storing user input
		int user_choice;
		
};

using namespace std;

/*Main function will include user input and test driver program*/
int main()
{
	/*Creating an object called game_start for RPS_Game class*/
	RPS_Game game_start, testing;
	/*integer variables for storing the return value of user input and computer input*/
	int user = 0;
	int AI = 0;
	/*Variables for testing purposes only*/
	int user_test = 0;
	int cmpt_test = 0;
	/* Answer varaible represents whether or not the user want to continue the testing and the game*/
	char answer, test;
	
	/*General while loop for the game. The game will loop over until the user input anything other than Y for yes.*/
	do
	{
		cout << "----------Rock, Paper, Scissors Game----------" << endl;
		//Accessing player_input from public RPS_Game member function
		game_start.player_input();
		//Accessing cmpt_choice from public RPS_Game member function
		game_start.cmpt_choice();
		game_start.c_choice( game_start.getCmptData() ); 

		user = game_start.getUserData();
		AI = game_start.getCmptData();

		//Accessing result from public RPS_Game member function
		//The output to the screen will be either a winner or looser for this round of the game
		game_start.result( user, AI );
		
		cout << "Would you like to continue? (Y for Continue/ N for Discard to Proceed to Test Driver) : " << endl;
		cin >> answer;
		cout << endl << endl;
	} while ( answer == 'y' || answer == 'Y' ); /*If the user input Y for yes then it will run the loop again until user input N for no*/


	/*--------------------Test Driver Program--------------------*/
	do
	{
		cout << "----------ENTERING TEST DRIVER FOR Rock, Paper, Scissors Game----------" << endl;
		
		/*Testing whether the decision input by the tester matches the output messages of the u_choice function, which should output what the user has chosen
		in terms of rock, paper, or scissors*/
		cout << "You have following choices for your input:  " << endl;
		cout << "1. ROCK" << endl << "2. PAPER" << endl << "3. SCISSORS" << endl << endl;
		cout << "Please enter a number from 1-3 based on the following selections: ";
		cin >> user_test;
		cout << "The expected message for user input decision should be: " << endl << endl;
		if ( user_test == 1)
		{
			cout << "The option ROCK has been chosen." << endl;
		}
		//Checking for paper
		if ( user_test == 2)
		{
			cout << "The option PAPER has been chosen." << endl;
		}
		//Checking for scissors
		if ( user_test == 3)
		{
			cout << "The option SCISSORS has been chosen." << endl;
		}
		if (user_test > 3 && user_test < 0)
		{
			cout << endl << "Invalid Input!! Please try again by entering a corresponding number on the list!!!" << endl;
			cout << "You have following choices for your input:  " << endl;
			cout << "1. ROCK" << endl << "2. PAPER" << endl << "3. SCISSORS" << endl << endl;
			cout << "Please enter a number from 1-3 based on the following selections: ";
			cin >> user_test;
		}

		cmpt_test = testing.cmpt_choice();
		//First determines if it is a Rock
		if (cmpt_test == 1)
		{
			cout << "The Computer has chosen ROCK." << endl;
		}
		//Checking for paper
		if (cmpt_test == 2)
		{
			cout << "The Computer has chosen PAPER." << endl;
		}
		//Checking for scissors
		if (cmpt_test == 3)
		{
			cout << "The Computer has chosen SCISSORS." << endl;
		}
		
		/*Testing the judging function*/
		if (user_test == 1)
		{
			//User has chosen rock and computer has chosen paper, the winner is the computer
			if (cmpt_test == 2)
			{
				cout << "You have lost to the computer! Paper wraps rock!" << endl;
			}
			//Computer has chosen scissors, computer loose
			if (cmpt_test == 3)
			{
				cout << "CONGRATULATION!! You won the game! The rock smashes the scissors!" << endl;
			}
		}

		//Determining winning and loosing options for Paper based on user input
		if (user_test == 2)
		{
			//User has chosen paper and computer has chosen scissors, the winner is the computer
			if (cmpt_test == 3)
			{
				cout << "You have lost to the computer! Scissors cut paper!" << endl;
			}
			//Computer has chosen rock, computer loose
			if (cmpt_test == 1)
			{
				cout << "CONGRATULATION!! You won the game! Paper wrap rocks!" << endl;
			}
		}

		//Determining winning and loosing options for Scissors based on user input
		if (user_test == 3)
		{
			//User has chosen scissors and computer has chosen rock, the winner is the computer
			if (cmpt_test == 1)
			{
				cout << "You have lost to the computer! The rock smashes the scissors!" << endl;
			}
			//Computer has chosen paper, computer loose
			if (cmpt_test == 2)
			{
				cout << "CONGRATULATION!! You won the game! Scissors cut paper!" << endl;
			}
		}
		/*Condition for checking for a tie game.
		Tie game occurs when computer and user has the same input.
		It will go through the player_input function again to ask user to try
		out different input until one end has won the game. The cmpt_choice() will
		be called again until a winner has been announced.*/
		if (user_test == cmpt_test)
		{
			cout << endl << "------------TIED GAME------------" << endl;
			cout << "You have chosen the same option as the computer! Please try again!" << endl << endl;
			/*Tie game requires player and computer to have new input until one end wins.*/
			cout << endl;

		}
		/*The actual output of all the messages*/
		cout << endl << "The messages after all the function calls are:" << endl << endl;
		testing.u_choice(user_test); 
		testing.c_choice(cmpt_test);
		testing.result(user_test, cmpt_test);
		
		cout << endl << "Would you like to continue the testing? (Y for Continue/ N for Discard) : " << endl << endl;
		cin >> test;
		cout << endl << endl;
	} while (test == 'y' || test == 'Y'); /*If the user input Y for yes then it will run the loop again until user input N for no*/

}

/*----------Constructors and Functions definitions for the Rock, Paper, Scissor Game----------*/

/*Constructor for initializing the variable com_rand and user_choice to zero*/
RPS_Game::RPS_Game()
{
	comp_rand = 0;
	user_choice = 0;
}
/* PreCondition: User input has been passed in as function parameter
   PostCondition: The function will output the corresponding message according user input*/
void RPS_Game::u_choice(int game_input)
{
	/*If statements for determining if Rock, Paper, or Scissor has been passed in as function parameter
	and print it onto the screen.*/

	//First determines if it is a Rock
	if ( game_input == 1 )
	{
		cout << "The option ROCK has been chosen." << endl;
	}
	//Checking for paper
	if ( game_input == 2 )
	{
		cout << "The option PAPER has been chosen." << endl;
	}
	//Checking for scissors
	if ( game_input == 3 )
	{
		cout << "The option SCISSORS has been chosen." << endl;
	}
}
/* PreCondition: Computer input has been passed in as function parameter
   PostCondition: The function will output the corresponding message according computer input*/
void RPS_Game::c_choice(int c_input)
{
	/*If statements for determining if Rock, Paper, or Scissor has been passed in as function parameter
	and print it onto the screen.*/

	//First determines if it is a Rock
	if ( c_input == 1)
	{
		cout << "The Computer has chosen ROCK." << endl;
	}
	//Checking for paper
	if ( c_input == 2)
	{
		cout << "The Computer has chosen PAPER." << endl;
	}
	//Checking for scissors
	if ( c_input == 3)
	{
		cout << "The Computer has chosen SCISSORS." << endl;
	}
}

/*	PreCondition: user_input will pass 1~3 in as the function as function parameter
	and 1 corresponds to Rock, 2 corresponds to paper, 3 corresponds to scissors and so is the random
	number generated by the computer.
	PostCondition: The winner will be announced and tie will continue the game until one end wins.
*/
void RPS_Game::result(int user_input , int comp_input)
{
	/*Series of if statements to determine who won and condition for tie.
	 If it is a tie, the user will be asked to input different choice until
	 a winner has been decided.*/

	//Determining winning and loosing options for ROCK based on user input
	if (user_input == 1)
	{
		//User has chosen rock and computer has chosen paper, the winner is the computer
		if (comp_input == 2)
		{
			cout << "You have lost to the computer! Paper wraps rock!" << endl;
		}
		//Computer has chosen scissors, computer loose
		if (comp_input == 3)
		{
			cout << "CONGRATULATION!! You won the game! The rock smashes the scissors!" << endl;
		}
	}

	//Determining winning and loosing options for Paper based on user input
	if (user_input == 2)
	{
		//User has chosen paper and computer has chosen scissors, the winner is the computer
		if (comp_input == 3)
		{
			cout << "You have lost to the computer! Scissors cut paper!" << endl;
		}
		//Computer has chosen rock, computer loose
		if (comp_input == 1)
		{
			cout << "CONGRATULATION!! You won the game! Paper wrap rocks!" << endl;
		}
	}

	//Determining winning and loosing options for Scissors based on user input
	if (user_input == 3)
	{
		//User has chosen scissors and computer has chosen rock, the winner is the computer
		if (comp_input == 1)
		{
			cout << "You have lost to the computer! The rock smashes the scissors!" << endl;
		}
		//Computer has chosen paper, computer loose
		if (comp_input == 2)
		{
			cout << "CONGRATULATION!! You won the game! Scissors cut paper!" << endl;
		}
	}

	/*Condition for checking for a tie game.
	  Tie game occurs when computer and user has the same input.
	  It will go through the player_input function again to ask user to try
	  out different input until one end has won the game. The cmpt_choice() will
	  be called again until a winner has been announced.*/
	if ( user_input == comp_input )
	{
		cout << endl << "------------TIED GAME------------" << endl;
		cout<<"You have chosen the same option as the computer! Please try again!" << endl << endl;
		/*Tie game requires player and computer to have new input until one end wins.*/
		player_input(); 
		c_choice( getCmptData() );
		/*Recursive call if both user and computer has the same input to determine the winner.
		  If one end wins, it will not enter this if statements and recursive function will not
		  occur*/
		result( getUserData(), getCmptData() );
		cout << endl;
	
	}
}


/* PreCondition: user_input function is a void fucntion that asks for user input
   PostCondition: The function will store user input and output user input to the screen
*/
void RPS_Game::player_input()
{
	//Basic input and output from the user
	//Asking user for the input for the game
	cout << "You have following choices for your input:  " << endl;
	cout << "1. ROCK" << endl << "2. PAPER" << endl << "3. SCISSORS" << endl << endl;
	cout << "Please enter a number from 1-3 based on the following selections: ";
	cin >> user_choice;
	
	/*If the user enter an invalid number, which is greater than 3 and less than 0, it will enter the while 
	  until a valid input has been entered.*/
	while (user_choice > 3 || user_choice <= 0)
	{
		cout << endl << "Invalid Input!! Please try again by entering a corresponding number on the list!!!" << endl;
		cout << "You have following choices for your input:  " << endl;
		cout << "1. ROCK" << endl << "2. PAPER" << endl << "3. SCISSORS" << endl << endl;
		cout << "Please enter a number from 1-3 based on the following selections: ";
		cin >> user_choice;
	}
	//Calling function in the class function member to determine what has been chosen and output to the screen
	u_choice(user_choice); 
}

/*
PreCondition: The computer will use time library to produce a random number and have that
number as the input for the game
PostCondition: The function will randomly generate a number from 1 to 3 and store
it into the variable called comp_rand. The random_num_generator() will print the corresponding
messages according to the random number that is generated to the screen as well.
*/
/*
* The operation of random number generation in the following function is derived from the
* code available at the following location: http://www.cplusplus.com/reference/cstdlib/rand/
* The file has the following copyright from the original author:
* cplusplus.com 2000-2017
*
**/
/* PreCondition: A number from 1~3 is passed into the function parameter under game_input 
   with 1 as Rock, 2 as Paper, and 3 as Scissors.
   PostCondition: According to the input, the function will print out the corresponding message
   to the screen. For instance, if 1 is passed, the function will print "Rock has been chosen"
*/
int RPS_Game::cmpt_choice()
{
	/*Using time library to generate random number from 1 to 3 and store it into
	private variable in the class comp_rand*/
	srand( unsigned ( time(NULL) ) );
	comp_rand = rand() % 3 + 1;
	return comp_rand; //Returning the computer random value
}
/*Simple accessor function that access the private variables user_choice and return to main()*/
int RPS_Game::getUserData()
{
	return user_choice;
}
/*Simple accessor function that access the private variable cmpt_rand and return to main()*/
int RPS_Game::getCmptData()
{
	return comp_rand;
}